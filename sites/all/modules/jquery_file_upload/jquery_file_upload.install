<?php

/**
 * @file
 * Install, and uninstall functions for the jquery_file_upload module.
 */

/**
 * Implements hook_requirements().
 */
function jquery_file_upload_requirements($phase) {
  $requirements = array();

  $t = get_t();

  if ($phase == 'install') {
    $exists = jquery_file_upload_library_exists();
    if ($exists) {
      $requirements['jquery_file_upload'] = array(
          'title' => $t('jQuery File Upload'),
          'description' => "jQuery File Upload plugin installed successfully",
          'severity' => REQUIREMENT_OK,
      );
    }
    else {
      $requirements['jquery_file_upload'] = array(
          'title' => $t('jQuery File Upload'),
          'description' => "jQuery File Upload plugin needs to be installed, please download from <a href='https://github.com/compujohnny/jQuery-File-Upload/archive/master.zip'>https://github.com/compujohnny/jQuery-File-Upload/archive/master.zip</a> then extract and copy the css, js and img folders in the modules directory under jquery_file_upload/lib",
          'severity' => REQUIREMENT_ERROR,
      );
    }
  }

  return $requirements;
}

/**
 * Check that all library file required exists
 */
function jquery_file_upload_library_exists() {

  $base_lib_path = DRUPAL_ROOT.'/'.drupal_get_path('module', 'jquery_file_upload').'/lib';

  return  file_exists($base_lib_path  . '/js/jquery.fileupload.js') &&
          file_exists($base_lib_path . '/js/jquery.fileupload-ui.js') &&
          file_exists($base_lib_path . '/js/jquery.fileupload-fp.js') &&
          file_exists($base_lib_path . '/js/jquery.iframe-transport.js') &&
          file_exists($base_lib_path . '/js/vendor/jquery.ui.widget.js') &&
          file_exists($base_lib_path . '/js/cors/jquery.postmessage-transport.js') &&
          file_exists($base_lib_path . '/css/jquery.fileupload-ui-noscript.css') &&
          file_exists($base_lib_path . '/css/jquery.fileupload-ui.css');
}

/**
 * Implements hook_schema().
 */
function jquery_file_upload_schema() {
  $schema['jquery_file_upload'] = array(
      'description' => t('Stores files sizes for each user.'),
      'fields' => array(
          'id' => array(
              'description' => t('auto increment'),
              'type' => 'serial',
              'size' => 'normal',
          ),
          'uid' => array(
              'description' => t('registered user'),
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
              'default' => 0,
          ),
          'file_name' => array(
              'description' => t('File Name.'),
              'type' => 'varchar',
              'length' => '255',
              'not null' => TRUE,
          ),
          'file_size' => array(
              'description' => t('File Size.'),
              'type' => 'float',
              'size' => 'big',
              'default' => 0,
          ),
      ),
      'primary key' => array('id'),
  );
  return $schema;
}

/**
 * Implements hook_install().
 */
function jquery_file_upload_install() {
  $type_values = array(
      'op' => 'Save content type',
      'type' => 'jquery_uploader_node',
      'name' => 'Jquery Uploader Node',
      'orig_type' => '',
      'old_type' => '',
      'description' => 'Jquery Uploader Node content type',
      'help' => 'Exp',
      'title_label' => '',
      'body_label' => '',
      'base' => '',
      'custom' => '1',
      'locked' => '0',
      'modified' => '1'
  );

  $op = isset($type_values['op']) ? $type_values['op'] : '';

  $type = node_type_set_defaults();

  $type->type = trim($type_values['type']);
  $type->name = trim($type_values['name']);
  $type->orig_type = trim($type_values['orig_type']);
  $type->old_type = isset($type_values['old_type']) ? $type_values['old_type'] : $type->type;

  $type->description = $type_values['description'];
  $type->help = $type_values['help'];
  $type->title_label = $type_values['title_label'];
  $type->body_label = $type_values['body_label'];

  // title_label is required in core; has_title will always be TRUE, unless a
  // module alters the title field.
  $type->has_title = ($type->title_label != '');
  $type->has_body = ($type->body_label != '');

  $type->base = !empty($type_values['base']) ? $type_values['base'] : 'node_content';
  $type->custom = $type_values['custom'];
  $type->modified = TRUE;
  $type->locked = $type_values['locked'];


  $status = node_type_save($type);

  $field = array(
      'field_name' => 'field_jquery_uploader_file',
      'type' => 'file',
  );
  field_create_field($field);

  $instance = array(
      'field_name' => 'field_jquery_uploader_file',
      'entity_type' => 'node',
      'bundle' => 'jquery_uploader_node',
      'label' => 'Image',
      'description' => '',
      'settings' => array(
          'file_extensions' => 'gif jpeg jpg png tiff asf avi mpeg mpg wmv vob mov mp4 flv txt doc docx xls xlsx ppt pptx mp3', // default 'txt'
      ),
      'widget' => array(
          'type' => 'file_generic',
          'weight' => 1,
      ),
  );
  field_create_instance($instance);

  $t_args = array('%name' => $type->name);

  if ($status == SAVED_UPDATED) {
    drupal_set_message(st('The content type %name has been updated.', $t_args));
  }
  elseif ($status == SAVED_NEW) {
    drupal_set_message(st('The content type %name has been added.', $t_args));
    watchdog('node', 'Added content type %name.', $t_args, WATCHDOG_NOTICE, l(st('view'), 'admin/structure/types'));
  }
}

/**
 * Implements hook_uninstall().
 */
function jquery_file_upload_uninstall() {
  $user_roles = user_roles(TRUE);
  foreach ($user_roles as $index => $role) {
    if (strpos($role, ' ') > 0) {
      $current_role = str_replace(' ', '_', $role);
    }
    else {
      $current_role = $role;
    }
    variable_del('max_file_size_' . $current_role);
    variable_del('max_quota_' . $current_role);
  }


  /////////////////////////////////////////////////
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'jquery_uploader_node'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // api.drupal.org/api/function/node_delete_multiple/7

  node_delete_multiple($nids);


  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // api.drupal.org/api/function/field_delete_field/7

  field_delete_field('field_jquery_uploader_file');

  // Delete our content type
  // api.drupal.org/api/function/node_type_delete/7

  node_type_delete('jquery_uploader_node');

  // Purge all field information
  // api.drupal.org/api/function/field_purge_batch/7

  field_purge_batch(1000);
  drupal_flush_all_caches();
}
