<?php

/**
 * Implements hook_menu().
 */
function jquery_file_upload_menu() {

  $items['jquery_file_upload/upload'] = array(
      'page callback' => 'jquery_file_uploader_upload',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['jquery_file_upload/delete/%/%'] = array(
      'page callback' => 'jquery_file_uploader_delete',
      'page arguments' => array(2, 3),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );

  $items['admin/config/media/jquery_file_upload'] = array(
      'title' => t('Jquery File Uploader'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('jquery_file_upload_configuration_form'),
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
  );

  $items['jquery_file_upload/get_remaining_space'] = array(
      'title' => t(''),
      'page callback' => 'jquery_file_upload_calculate_space',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function jquery_file_upload_block_info() {

  $blocks['jquery_file_uploader'] = array(
      'info' => t('jQuery File Uploader'),
      'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function jquery_file_upload_block_view($delta = '') {

  $block = array();

  switch ($delta) {
    case 'jquery_file_uploader':
      $block['subject'] = t('Upload');
      $block['content'] = drupal_get_form('jquery_file_upload_form');
      break;
  }

  jquery_file_upload_add_configurations();

  return $block;
}

/**
 * jQuery File Upload form
 */
function jquery_file_upload_form($form, &$form_state) {

  drupal_add_library("jquery_file_upload", "jquery_file_upload");

  $form['#attributes'] = array('enctype' => 'multipart/form-data');

  $form['#action'] = 'jquery_file_upload/upload';

  return $form;
}

/**
 * Implements hook_theme().
 */
function jquery_file_upload_theme($existing, $type, $theme, $path) {
  return array(
      'jquery_file_upload_form' => array(
          'render element' => 'form',
          'template' => 'jquery_file_upload-form'
      )
  );
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jquery_file_upload_preprocess_jquery_file_upload_form(&$variables){
  $variables['add_button'] = drupal_render($variables['form']['upload']);
}

/**
 * Adds the configuration parameters to the jQuery File Upload plugin
 */
function jquery_file_upload_add_configurations() {
  global $user;

  $roles = $user->roles;
  $roles_compare = array();

  foreach ($roles as $role_index => $role_name) {
    if (strpos($role_name, ' ') > 0) {
      $current_role = str_replace(' ', '_', $role_name);
    }
    else {
      $current_role = $role_name;
    }
    $roles_compare[$role_index] = array(variable_get('max_file_size_' . $current_role, 0), variable_get('max_quota_' . $current_role, 0));
  }

  $large_values_index = jquery_file_upload_get_role_index($roles_compare);
  $current_role = $roles[$large_values_index];

  if (strpos($current_role, ' ') > 0) {
    $final_role = str_replace(' ', '_', $current_role);
  }
  else {
    $final_role = $current_role;
  }

  //get space taken up till now
  $space_taken = 0;
  $sql_query = db_query("SELECT * FROM {jquery_file_upload} WHERE uid = :uid", array(':uid' => $user->uid));

  while ($row = $sql_query->fetchAssoc()) {
    $space_taken += floatval($row['file_size']);
  }

  $js_vars = new stdClass;
  $js_vars->filetypes = str_replace(' ', '|', variable_get('types_supported_' . $final_role, ''));
  $js_vars->max_file_size = variable_get('max_file_size_' . $final_role, 0) * 1024 * 1024;
  $js_vars->space_remaining = variable_get('max_quota_' . $final_role, 0) * 1024 * 1024 - $space_taken;

  jquery_file_upload_load_external_js();

  jquery_file_upload_load_css();

  drupal_add_js("jQuery(function(){ init_fileuploader(" . json_encode($js_vars) . "); });", array('type' => 'inline', 'scope' => 'footer'));
}

/**
 * Load the required css files to the page
 */
function jquery_file_upload_load_css(){
  drupal_add_css(drupal_get_path("module", "jquery_file_upload").'/main.css');
  drupal_add_css(drupal_get_path("module", "jquery_file_upload").'/lib/css/jquery.fileupload-ui.css');
}

/**
 * Load the required external js files to the page
 */
function jquery_file_upload_load_external_js(){
  drupal_add_js(drupal_get_path("module", "jquery_file_upload")."/lib/js/vendor/jquery.ui.widget.js", array('scope' => 'footer'));

  drupal_add_js("http://blueimp.github.com/cdn/js/bootstrap.min.js", array('type' => 'external', 'scope' => 'footer'));
  drupal_add_js("http://blueimp.github.com/Bootstrap-Image-Gallery/js/bootstrap-image-gallery.min.js", array('type' => 'external', 'scope' => 'footer'));
  drupal_add_js("http://blueimp.github.com/JavaScript-Templates/tmpl.min.js", array('type' => 'external', 'scope' => 'footer'));
  drupal_add_js("http://blueimp.github.com/JavaScript-Load-Image/load-image.min.js", array('type' => 'external', 'scope' => 'footer'));
  drupal_add_js("http://blueimp.github.com/JavaScript-Canvas-to-Blob/canvas-to-blob.min.js", array('type' => 'external', 'scope' => 'footer'));

  drupal_add_js(drupal_get_path("module", "jquery_file_upload")."/lib/js/jquery.iframe-transport.js", array('scope' => 'footer'));
  drupal_add_js(drupal_get_path("module", "jquery_file_upload")."/lib/js/jquery.fileupload.js", array('scope' => 'footer'));
  drupal_add_js(drupal_get_path("module", "jquery_file_upload")."/lib/js/jquery.fileupload-fp.js", array('scope' => 'footer'));
  drupal_add_js(drupal_get_path("module", "jquery_file_upload")."/lib/js/jquery.fileupload-ui.js", array('scope' => 'footer'));

  drupal_add_js(drupal_get_path("module", "jquery_file_upload")."/main.js", array('scope' => 'footer'));
}

function jquery_file_uploader_upload() {

  if (array_key_exists('files', $_FILES)) {

    global $base_url, $user;

    //check for folders
    $current_directory = getcwd();
    if (!file_exists($current_directory . '/' . variable_get('file_public_path', conf_path() . '/files') . '/file_uploads')) {
      $result = mkdir($current_directory . '/' . variable_get('file_public_path', conf_path() . '/files') . '/file_uploads');
    }
    if (!file_exists($current_directory . '/' . variable_get('file_public_path', conf_path() . '/files') . '/file_uploads/' . $user->uid)) {
      $result = mkdir($current_directory . '/' . variable_get('file_public_path', conf_path() . '/files') . '/file_uploads/' . $user->uid);
    }

    $secure_file_name = file_munge_filename($_FILES['files']['name'][0], "gif jpeg jpg png tiff asf avi mpeg mpg wmv vob mov mp4 flv txt doc docx xls xlsx ppt pptx mp3");

    $destination_uri = file_build_uri('file_uploads/' . $user->uid);

    $ok = file_save_upload(0, array(), $destination_uri);

    if ($ok) {
      //add node
      $node = new StdClass();
      $filenamexx = explode(".", $_FILES['files']['name'][0]);
      $node->type = 'jquery_uploader_node';
      $node->uid = $user->uid;
      $node->status = 1;
      $node->title = $filenamexx[0];

      $ok->display = 1;
      $node->field_jquery_uploader_file['und'][0] = (array) $ok;
      node_save($node);

      $nid = db_insert('jquery_file_upload') // Table name no longer needs {}
              ->fields(array(
                  'uid' => $user->uid,
                  'file_name' => $_FILES['files']['name'][0],
                  'file_size' => floatval($_FILES['files']['size'][0]),
              ))
              ->execute();

      $token = drupal_get_token($secure_file_name);

      $file = array(
          'name' => $_FILES['files']['name'][0],
          'size' => $_FILES['files']['size'][0],
          'url' => $base_url . '/sites/default/files/file_uploads/' . $user->uid . '/' . $secure_file_name,
          'thumbnail_url' => image_style_url('thumbnail', file_build_uri('file_uploads/' . $user->uid . '/' . $secure_file_name)),
          'delete_url' => $base_url . '/jquery_file_upload/delete/' . $secure_file_name . '/' . $token,
          'delete_type' => 'DELETE',
      );

      watchdog('debug', print_r($file, true));

      drupal_json_output(array($file));
    }
  }
}

/**
 * Ajax call handler that deletes a file
 */
function jquery_file_uploader_delete($name, $token) {
  global $user;
  if (file_exists('sites/default/files/file_uploads/' . $user->uid . '/' . $name) && drupal_valid_token($token, $name)) {
    unlink('sites/default/files/file_uploads/' . $user->uid . '/' . $name);
    $num_deleted = db_delete('jquery_file_upload')
            ->condition('uid', $user->uid)
            ->condition('file_name', $name)
            ->execute();
    $filenamexx = explode(".", $name);
    $sql_query = db_query("SELECT nid FROM {node} WHERE type = 'jquery_uploader_node' AND title = :title", array(':title' => $filenamexx[0]));
    $result = $sql_query->fetchAssoc();
    $nid = $result['nid'];
    node_delete($nid);
  }
}

function jquery_file_upload_configuration_form($form, &$form_state) {
  $user_roles = user_roles(TRUE);

  $form['max_file_size'] = array(
      '#type' => 'fieldset',
      '#title' => t('Maximum file size per role'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#description' => t('Enter Max File Size in MB.'),
  );

  foreach ($user_roles as $index => $role) {
    if (strpos($role, ' ') > 0) {
      $current_role = str_replace(' ', '_', $role);
    }
    else {
      $current_role = $role;
    }
    $form['max_file_size']['max_file_size_' . $index] = array(
        '#type' => 'textfield',
        '#title' => t('Role: ' . $role),
        '#default_value' => variable_get('max_file_size_' . $current_role, 0),
        '#size' => 30,
        '#maxlength' => 128,
        '#required' => TRUE,
    );
  }

  $form['max_quota'] = array(
      '#type' => 'fieldset',
      '#title' => t('Maximum Quota per role'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#description' => t('Enter Max Quota in MB.'),
  );

  foreach ($user_roles as $index => $role) {
    if (strpos($role, ' ') > 0) {
      $current_role = str_replace(' ', '_', $role);
    }
    else {
      $current_role = $role;
    }
    $form['max_quota']['max_quota_' . $index] = array(
        '#type' => 'textfield',
        '#title' => t('Role: ' . $role),
        '#default_value' => variable_get('max_quota_' . $current_role, 0),
        '#size' => 30,
        '#maxlength' => 128,
        '#required' => TRUE,
    );
  }

  $form['types_supported'] = array(
      '#type' => 'fieldset',
      '#title' => t('Files allowed'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#description' => t('Enter Extensions separted by space.'),
  );
  foreach ($user_roles as $index => $role) {
    if (strpos($role, ' ') > 0) {
      $current_role = str_replace(' ', '_', $role);
    }
    else {
      $current_role = $role;
    }
    $form['types_supported']['types_supported_' . $index] = array(
        '#type' => 'textfield',
        '#title' => t('Role: ' . $role),
        '#default_value' => variable_get('types_supported_' . $current_role, ''),
        '#size' => 30,
        '#maxlength' => 128,
        '#required' => TRUE,
    );
  }

  $form['submit'] = array('#type' => 'submit', '#value' => t('Save Configuration'));

  return $form;
}

function jquery_file_upload_configuration_form_submit($form, &$form_state) {
  $user_roles = user_roles(TRUE);
  foreach ($user_roles as $index => $role) {
    if (strpos($role, ' ') > 0) {
      $current_role = str_replace(' ', '_', $role);
    }
    else {
      $current_role = $role;
    }
    variable_set('max_file_size_' . $current_role, $form_state['values']['max_file_size_' . $index]);
    variable_set('max_quota_' . $current_role, $form_state['values']['max_quota_' . $index]);
    variable_set('types_supported_' . $current_role, $form_state['values']['types_supported_' . $index]);
  }
}

function jquery_file_upload_get_role_index($roles_values) {
  if (count($roles_values) == 1) {
    foreach ($roles_values as $role_index => $values) {
      $returned_index = $role_index;
    }
  }
  else {
    $keys = array_keys($roles_values);
    $returned_index = $keys[0];
    foreach ($roles_values as $role_index => $values) {
      if ($returned_index != $role_index) {
        $returned_values = $roles_values[$returned_index];
        if ($values[0] > $returned_values[0] && $values[1] > $returned_values[1]) {
          $returned_index = $role_index;
        }
      }
    }
  }

  return $returned_index;
}

function jquery_file_upload_calculate_space() {
  global $user;
  $roles = $user->roles;
  $roles_compare = array();
  foreach ($roles as $role_index => $role_name) {
    if (strpos($role_name, ' ') > 0) {
      $current_role = str_replace(' ', '_', $role_name);
    }
    else {
      $current_role = $role_name;
    }
    $roles_compare[$role_index] = array(variable_get('max_file_size_' . $current_role, 0), variable_get('max_quota_' . $current_role, 0));
  }
  $large_values_index = jquery_file_upload_get_role_index($roles_compare);
  $current_role = $roles[$large_values_index];
  if (strpos($current_role, ' ') > 0) {
    $final_role = str_replace(' ', '_', $current_role);
  }
  else {
    $final_role = $current_role;
  }
  //get space taken up till now
  $space_taken = 0;
  $sql_query = db_query("SELECT * FROM {jquery_file_upload} WHERE uid = :uid", array(':uid' => $user->uid));
  while ($row = $sql_query->fetchAssoc()) {
    $space_taken += floatval($row['file_size']);
  }

  $space_remaining = variable_get('max_quota_' . $final_role, 0) * 1024 * 1024 - $space_taken;
  print $space_remaining;
}