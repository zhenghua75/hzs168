<?php

/**
 * @file
 * A Field offering province, city, and county of China.
 */

/**
 * Determine what kind of level to display the field.
 */
define('CHINA_ADDRESS_FULL', 1);
define('CHINA_ADDRESS_PROVINCE_CITY', 2);
define('CHINA_ADDRESS_CITY_COUNTY', 3);


/**
 * Implements hook_field_info().
 */
function china_address_field_info() {
  return array(
    'china_address' => array(
      'label' => t('China address'),
      'description' => t('This field stores province, city, and county of China.'),
      'settings' => array(
        'china_address_level' => CHINA_ADDRESS_FULL,
        'china_address_province_default' => 2,
      ),
      'default_widget' => 'china_address_default',
      'default_formatter' => 'china_address_default',
      'property_type' => 'china_address',
      'property_callbacks' => array('china_address_property_info_callback'),
    ),
  );
}
/**
 * Callback to alter the property info of address fields.
 *
 * @see addressfield_field_info().
 */
function china_address_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  //$property['type'] = ($field['cardinality'] != 1) ? 'list<addressfield>' : 'addressfield';
  //$property['getter callback'] = 'entity_metadata_field_verbatim_get';
  //$property['setter callback'] = 'entity_metadata_field_verbatim_set';
  //$property['auto creation'] = 'addressfield_auto_creation';
  $property['property info'] = china_address_data_property_info();

  //unset($property['query callback']);
}

/**
 * Defines info for the properties of the address field data structure.
 */
function china_address_data_property_info($name = NULL) {
  // Build an array of basic property information for the address field.
  $properties = array(
    'Province' => array(
      'label' => t('Province'),
    ),
    'City' => array(
      'label' => t('City'),
    ),
    'county' => array(
      'label' => t('county'),
    ),
  );

// Add the default values for each of the address field properties.
  // foreach ($properties as $key => &$value) {
  //   $value += array(
  //     'description' => !empty($name) ? t('!label of field %name', array('!label' => $value['label'], '%name' => $name)) : '',
  //     'type' => 'text',
  //     'getter callback' => 'entity_property_verbatim_get',
  //     'setter callback' => 'entity_property_verbatim_set',
  //   );
  // }
  return $properties;
}
/**
 * Implements hook_field_settings_form().
 */
function china_address_field_settings_form($field, $instance, $has_data) {
  if ($field['type'] == 'china_address') {
    $settings = $field['settings'];
    $form['china_address_level'] = array(
      '#type' => 'select',
      '#title' => t('Choose region level'),
      '#options' => array(
        CHINA_ADDRESS_FULL => t('Province, city, and county'),
        CHINA_ADDRESS_PROVINCE_CITY => t('Province and city'),
        CHINA_ADDRESS_CITY_COUNTY => t('City and county'),
      ),
      '#default_value' => $settings['china_address_level'],
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'china_address') . '/china_address.js'),
      ),
    );
    // For "City and county" level, we need to specific the province
    // they come from.
    $form['china_address_province_default'] = array(
      '#type' => 'select',
      '#title' => t('Province'),
      '#default_value' => $settings['china_address_province_default'],
      '#options' => china_address_provinces(),
    );

    return $form;
  }
}

/**
 * Implements hook_field_is_empty().
 */
function china_address_field_is_empty($item, $field) {
  if ($field['type'] == 'china_address') {
    if (empty($item['province'])
      && empty($item['city'])
      && empty($item['county'])) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_field_validate().
 */
function china_address_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  if ($field['type'] == 'china_address') {
    $columns = array(
      'province' => '',
      'city' => '',
      'county' => '',
    );
    foreach ($items as $delta => $item) {
      foreach ($columns as $column => $value) {
        if (!empty($item[$column])
          && !preg_match('/^-?\d+$/', $item[$column])) {
          $errors[$field['field_name']][$delta][] = array(
            'error' => 'china_address_' . $column,
            'message' => t('Values must be integers.'),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_widget_info().
 */
function china_address_field_widget_info() {
  return array(
    'china_address_default' => array(
      'label' => t('Select list'),
      'field types' => array('china_address'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function china_address_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // $lang = isset($form['language']['#value']) ?
  // $form['language']['#value'] : 'und';
  $lang = $langcode;
  switch ($instance['widget']['type']) {
    case 'china_address_default':
      // Set default value.
      $province = 2;
      $city = 52;
      $county = 500;

      // Province.
      if ($field['settings']['china_address_level'] == CHINA_ADDRESS_CITY_COUNTY && $field['settings']['china_address_province_default']) {
        $province = $field['settings']['china_address_province_default'];
      }
      elseif (isset($form_state['values'][$field['field_name']][$lang][0]['province'])) {
        // Ajax callback.
        $province = $form_state['values'][$field['field_name']][$lang][0]['province'];
      }
      elseif (isset($items[$delta]['province'])) {
        $province = $items[$delta]['province'];
      }

      // City.
      if (isset($form_state['values'][$field['field_name']][$lang][0]['city'])) {
        // Ajax callback.
        $city = $form_state['values'][$field['field_name']][$lang][0]['city'];
      }
      elseif (isset($items[$delta]['city'])) {
        $city = $items[$delta]['city'];
      }
      $cities = china_address_cities($province);
      $city_keys = array_keys($cities);
      if (!in_array($city, $city_keys)) {
        $city = $city_keys[0];
      }

      // County.
      if (isset($form_state['values'][$field['field_name']][$lang][0]['county'])) {
        // Ajax callback.
        $county = $form_state['values'][$field['field_name']][$lang][0]['county'];
      }
      elseif (isset($items[$delta]['county'])) {
        $county = $items[$delta]['county'];
      }
      $counties = china_address_counties($city);
      $county_keys = array_keys($counties);
      if (!in_array($county, $county_keys)) {
        $county = $county_keys[0];
      }

      $element['#prefix'] = '<div id="china-address-dropdown-replace-' . str_replace('_', '-', $field['field_name']) . '" class="china-address-dropdown-replace" >';
      $element['#suffix'] = '</div>';
      $element['#type'] = 'item';
      $ajax = array(
        '#ajax' => array(
          'callback' => 'china_address_dropdown_callback',
          'wrapper' => 'china-address-dropdown-replace-' . str_replace('_', '-', $field['field_name']),
        ),
      );
      $element['province'] = array(
        '#type' => 'select',
        '#title' => t('Province'),
        '#default_value' => $province,
        '#options' => china_address_provinces(),
      ) + $ajax;
      $element['city'] = array(
        '#type' => 'select',
        '#title' => t('City'),
        '#default_value' => $city,
        '#options' => $cities,
      );
      $element['county'] = array(
        '#type' => 'select',
        '#title' => t('County'),
        '#default_value' => $county,
        '#options' => $counties,
      );

      switch ($field['settings']['china_address_level']) {
        case CHINA_ADDRESS_FULL:
          $element['city'] += $ajax;
          break;

        case CHINA_ADDRESS_PROVINCE_CITY:
          unset($element['county']);
          break;

        case CHINA_ADDRESS_CITY_COUNTY:
          unset($element['province']);
          $element['city'] += $ajax;
          break;
      }
      break;
  }

  return $element;
}

/**
 * Get the province options.
 */
function china_address_provinces($province = NULL) {
  $provinces = china_address_fetch_region(1, 1);
  if ($province) {
    return isset($provinces[$province]) ? $provinces[$province] : '';
  }
  return $provinces;
}

/**
 * Get the city options.
 */
function china_address_cities($parent_id, $city = NULL) {
  $cities = china_address_fetch_region($parent_id, 2);
  if ($city) {
    return isset($cities[$city]) ? $cities[$city] : '';
  }
  return $cities;
}

/**
 * Get the county options.
 */
function china_address_counties($parent_id, $county = NULL) {
  $counties = china_address_fetch_region($parent_id, 3);
  if ($county) {
    return isset($counties[$county]) ? $counties[$county] : '';
  }
  return $counties;
}


/**
 * Fetch the address array by parent id, id => region.
 */
function china_address_fetch_region($parent_id, $region_type) {
  $result = db_query("SELECT region_id AS id, region_name AS region FROM {china_province} WHERE parent_id = :parent_id AND region_type = :region_type",
          array(':parent_id' => $parent_id, ':region_type' => $region_type));
  $regions = array();
  while ($record = $result->fetchAssoc()) {
    $regions[$record['id']] = $record['region'];
  }
  return $regions;
}

/**
 * Get region name by region_i.
 */
function china_address_get_region_name($region_id) {
  $result = db_query("SELECT region_name AS region FROM {china_province} WHERE region_id = :region_id",
          array(':region_id' => $region_id));
  $record = $result->fetchAssoc();
  return $record['region'];
}

/**
 * Selects dropdown to be returned for re-rendering.
 */
function china_address_dropdown_callback($form, $form_state) {
  $lang = isset($form['language']['#value']) ? $form['language']['#value'] : 'und';
  if ($form['#form_id'] == 'field_ui_field_edit_form') {
    return $form['instance']['default_value_widget'][$form['#field']['field_name']][$lang][0];
  }
  else {
    return $form[$form_state['triggering_element']['#parents'][0]][$lang][0];
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function china_address_field_formatter_info() {
  return array(
    'china_address_default' => array(
      'label' => t('Default formatter'),
      'field types' => array('china_address'),
    ),
    'china_address_clean' => array(
      'label' => t('Without label'),
      'field types' => array('china_address'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function china_address_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'china_address_default':
    case 'china_address_clean':
      foreach ($items as $delta => $item) {
        $address = array();
        $address['province'] = isset($item['province']) ? china_address_get_region_name($item['province']) : '';
        $address['city'] = isset($item['city']) ? china_address_get_region_name($item['city']) : '';
        $address['county'] = isset($item['county']) ? china_address_get_region_name($item['county']) : '';

        // If no county.
        if ($field['settings']['china_address_level'] == 2) {
          $address['county'] = '';
        }
        // If no province.
        elseif ($field['settings']['china_address_level'] == 3) {
          $address['province'] = '';
        }

        // Display.
        $label = ($display['type'] == 'china_address_default') ? TRUE : FALSE;

        $element[$delta] = array(
          '#markup' => theme('china_address', array('address' => $address, 'label' => $label)),
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function china_address_theme() {
  return array(
    'china_address' => array(
      'variables' => array('address' => array(), 'label' => TRUE),
      'template' => 'china-address',
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function china_address_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'field_ui_field_edit_form' && $form['#field']['type'] == 'china_address') {
    // Not support muti value, not need settings on this page.
    unset($form['field']['cardinality']);
  }
}
